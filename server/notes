general:
npm start   ----   changed to this in script from: node index.js run from inside server folder will start the express server
early heroku deployment - I like this so far
I never knew when you could/should deploy, but this guy is doing it as soon as express is set up
     I like this because it feels like solid footing, somthing to stand on, an answer to a question


both parent and child folders are git initialized.  not sure if this might come back to bite me at some point
I was primarially using the parent folder to track to github
the server folder has it's own git file - this one is the one that I can use to automatically depoloy to heroku
by using git push heroku master

--In production the create-react-app server does not exist
--the proxy file inside the react app rewrites requests from 3000 to 5000
heroku notes:
  deployed project: https://serene-hollows-22376.herokuapp.com
  heroku dictates which ports your app needs to listen to
  I don't recall what the following does, but for some reason
  we need to use a specific verson of npm and node? seems odd
  "engines": {
      "node": "8.1.1",
      "npm": "5.0.3"
    },

    Logging in... done
  Logged in as beckaaronr@gmail.com
  Aarons-MacBook-Air:server aaronrbeck$ heroku create
  Creating app... done, â¬¢ serene-hollows-22376
  https://serene-hollows-22376.herokuapp.com/ | https://git.heroku.com/serene-hollows-22376.git
  serene-hollows-22376                                    indentifies name of your app to heroku        
  https://serene-hollows-22376.herokuapp.com/             where we send visitors
  https://git.heroku.com/serene-hollows-22376.git         deployment target a git repository that we can push our local code base to

  heroku open     will open your projct in a browser window
  if browser does not deploy heroku project view logs with
  heroku logs







once you add a folder or file to git, it should be "greyed out"






google oauth notes:
passport has at least 2 libraries:

- passport : general helpers
- passport strategy: helps for authenticating one specific method





Lesson 25 - set up app.get in index.js
lesson 26 - fix the google redirect error by providing a valid redirect url
lesson 27 - got user token to console.log in termianl
lesson 28 - after our user comes back with a valid token after granting us passport access we can now save them to our database
lesson 29 - added nodemon
lesson 30 - server structure refactor
lesson 31 - theory of authentication lecture
lesson 32 - signing in users with oauth lecture
lesson 33 - mongo lecture
lesson 34 - setup mongoatlas cluster added mongo cluster info to keys.js
lesson 35 - mlab setup info - I skipped this as mLab does not exist
lesson 36 - npm install mongoose
lesson 37 - mongo lecture
lesson 38 - added User.js and a mongoose schema to users.js and created a mongo model class
lesson 39 - a lot of explaination, might be worth a re-watch, save a new record to mongodb
lesson 40 - modified callback in passport js to prevent duplicate users from being created in mongodb
lesson 41 - added "done" to our callback statement in passport.js
42 - added .serializeUser to passport.js
43 - added .deserializeUser to passport.js
44 - tell passport to use cookies, added cookie-session because express does not know how to handle cookies
  required cookie-session as well as passport on import statements in index.js
  added app.use(cookieSession({})) in index.js
  added keys to keys.js for our cookie session

45 - added app.get('/api/current_user', (req, res) to authRoutes.js
46 - added app.get('/api/logout', (req, res) to authRoutes.js
47 - lecture on difference between cookie sessions and epress session modules
  cookie-session info is store in the actual cookie - about 4kb max
  express session module stores a reference in the cookie, which allows you to store way more info in an off-site db storage apporpriate
  for this project since all we are storing is id in the cookie, cookie-session works and is 
  way more simple as express session requires some "store" decisions to be made
  we can use inspector / network to view how cookies get used
48 - lecture on why we should have seperate dev keys&db and prod keys&db
49 - 
50 - setting up production credentials for google oauth
51 - finding heroku redirect url for google oauth credentials
52 - changed keys and added prod.js propbably need to watch this again
53 - modified config values over at heroku
54 - supposed to have deployed via heroku, but the heroku version is not starting/running properly.


55 - create-react-app client inside servrer folder
56 - I never knew before that create-react-app creates it's own server.  i guess I knew as much
  but I guess I never really thought about it in those explicit terms.  but, duh, npm start then localhost3000 spins up, duh.
  added hi from app
57 - added client script to our serverr package.json to run the react servre starter
    added dev script and installed concurrently dependancy
58 - written update addressing proxy errors with create react app 2 and 3.0
59 - added proxy in the client packagejson which somehow helps direct the auth flow no matter whether we are in dev mode or prod mode
60 - added
61 - architecture theory lecture

section 7 - Developing the client side
62 - some refactoring theory/lecture.  best explaination I've seen on async await - this was the shit I tried to pay 10k to get and didn't get.  so pissed so often
63 - refactored passport.js to async/await
64 - finish a back end segment, then add corresponding front end, but don't do at the same time or you will end up with spaghetti code
  review of front end plan
65 - redux dependancies added
      instructor deleted all but registerServiceWorker.js in his src folder - I didn't do that yet. 
      index.js is the redux layer
      app.js is react router stuff
      added dependancies in client directory:npm install --save redux react-redux react-routher-dom
66 - re-wrote index and app.js files, terminal says things compiled
67 - instructor had an error related to his version of npm, he removed his json.lock file and installed a new one
68 - importer provider tag and setup some redux info
69 - added authReducer file
70 - imported authReducer to main react index.js
71 - react page component layout discussion
72 - initial react router setup
73 - 
74 - initial route setup - exact route for /
75 - finish initial route setup
76 - added materialize dependancy
77 - hooking up materialize parts
    materialize takes advantage of 'webpacks' that come with react
    webpack allows us to npm install css libraries such as materialize library
    import materialize-css/dist/css/materialize.min.css to main index.js
78 - applied header styling
79 - lecture: materialize requires one root container
    how do we figure out if user is logged in?
80 - SOME PROXY MODIFICATIONS - I DON'T THINK I NEED THEM?
      installed redux thunk(helps async requests behave) and axios(helps with ajax requests) libraries
      at some point you need to do some reading about redux (or not, just learn hooks) action creators


81 - wrote action creator using redux thunk and axios
    redux thunk give us direct access allowing us to manually dispatch the dispactch function
    refactored fetchUser inside src/index.js to use redux thunk
    yea, I don't understand redux - need to do some reading/learning

82 - refactor the app.js file from functional to class component
      because we want to place the action creator inside the app component because multiple components willl need to know when the user is logged in, not just the nav bar
83 - testing fetch user - this would be worth re-watching after you better understand redux
84 - refactor to async await syntax - i need more experience with refactoring - couldn't do this on my own
85 - changed authReducer's initials state to null and FETCH_USER  state as action.payload || false
    changed payload from res to res.data because we don't care about seeing other payloads like headers in the console.log
86 - added render content function to header.js so that we can display different logged in status on header
87 - added switch statment to header renderContent for sign in flow
88 - added another route handler to authRouits for after sign in redirect
89 - logout philosophy and changed authRout for a redirect logout to /
    we went with a full page refresh, ajax route would be faster for user
90 - created landing component and imported to app.js
91 - finished header: home link directs to /surveys or / depending on login status

Section 8: Handling Payments
92 - lecture, app overview, billing introduction
93 - lecture, billing; add credit overview, instructor billing best practices
      the collective we are bad a securtiy
      #1 never accept raw credit card numbers
      #2 never store cc numbers 
      #3 always use outside payment processor
        we will use strip

      Billing is hard   
      * is it possible to avoid monthly payments/multiple plans?
      * fraud and chargebacks are a pain


94 - stripe lecture and initial setup
  secret key will go in backend keys file
  publishable key will go in front end
  stripe checkout; checkout.js - react is slightly different than other front end frameworks
  install react-stripe-checkout 
95 - strip api keys
  keys put on server side: dev, prod, heroku
  keys placed on front end
  interesting info near the end about how es15 syntax does not allow for logic before an import statment, but classic syntax does allow for logic before imports

96 - react key processor
    define strip key as environment variable
97 - added .env.development and .env.production and added them to git ignore
98 - react stripe checkout component
      stripe checout with three required parameters

99  -stripe tokens - added payment button to header component
100 - resolved key warning from console, customized stripe payment properties, changed stripe button styling
101 - wrote action creator in src/actions/index.js for when tokens are added
102 - import connect and * in payments.js, changed parameter from console logging to         token={token => this.props.handleToken(token)}
103 - added express route handler, required billing routes in the express index.js
104 - install module for server side strip api
      documentation lecture: stripe
      when you charge a cc, you create a stripe "charge" object
105 - bring in secretStripeKey into billingRoutes
    express does not parse post payloads, so we added body-parser middleware
    
106 - changed billingRoutes.js to handle stripe.charges on the back end
107 - refactored stripe.charges to async
108
109
110
111




where I'm stuck:



how I got unstuck:


lesson 25- spelling error
  tried to start server at 5000 by running node index.js
  I got this: passport.use(new GoogleStrategy({
              ^

  TypeError: GoogleStrategy is not a constructor
  over at index.js I'm told:
  Could not find a declaration file for module 'passport-google-oauth20
  so I never npm installed google oauth 2.0?
  I went back and re-watched lesson 19
  so I went back and npm install --save passport-google-oauth20 and still no love.
  I checked spelling on passport import statements - no love there either
  Ok, I think i found the problem: it was a misspelling.  I changed my incorrect require('passport-google-oauth20').Strategy20
  to require('passport-google-oauth20').Strategy

lesson 26/27  - re-did things 3 times


  so I created credentials with http://localhost:5000 and http://localhost:5000/auth/google/callback in the apporpriate input boxes
  I've added clientID and client secret to keys.js, 
  then ran node index.js, then navigate to localhost:5000/auth/google in browser
  I'm still landing on the Error: redirect_uri_mismatchm, following the console link does actually take me back to the correct developer console
  that was not the case only moments ago.  I will give google 5 minutes to get things in their system.  fingers crossed
  I'm in.  not sure why/how, but oh, well

lesson 39 - import order of operations
  This was actually something that the instructor walkec
  us through, but still something good to remember - 
  if server crashes or does not start it may be due to 
  over of operations of require statements

 


53 - went back and reviewed earlier lessons and realized that I have 2 git initialized folders, the parent folder and the server folder
      the server folder was what the instructur had connected to heroku auto deployments
  i got the following message: 
  Aarons-MacBook-Air:udemynodewithreact aaronrbeck$ git push heroku master
  fatal: 'heroku' does not appear to be a git repository
  fatal: Could not read from remote repository.

  Please make sure you have the correct access rights
  and the repository exists.

  so I guess I need to go back to where we set up heroku and understand how git is connected to heroku for this project

alsk

59/60 ish: - with some research I decided to revert to a prior babel version.
            so far problem seems solved via
             https://github.com/creativetimofficial/ct-material-dashboard-pro-react/issues/62



      I ran:  npm install --save-exact @babel/runtime@7.0.0-beta.55


    the dual server deployment workflow is messed up.
    I need a break.  brain hurts. go back and check lesson 58.
    I'm confused as to how the proxy file works and whether we need to pull the 
    proxy statments out of the client packagejson
    when I run npm run dev the server side server starts at 5000, but react does not start at 3000
    and I get an error pointing towards babel: 
    Failed to compile.
    [1] 
    [1] ./node_modules/react-dev-utils/formatWebpackMessages.js
    [1] Module not found: Can't resolve '/Users/aaronrbeck/Documents/Assignments/sandbox/udemynodewithreact/server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray' in '/Users/aaronrbeck/Documents/Assignments/sandbox/udemynodewithreact/server/client/node_modules/react-dev-utils'
    [1] Compiling...
    [1] Failed to compile.
    [1] 
    [1] ./node_modules/react-dev-utils/formatWebpackMessages.js
    [1] Module not found: Can't resolve '/Users/aaronrbeck/Documents/Assignments/sandbox/udemynodewithreact/server/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray' in '/Users/aaronrbeck/Documents/Assignments/sandbox/udemynodewithreact/server/client/node_modules/react-dev-utils'

68 - changing url fixed
    for some reason when I ran npm run dev both servers started, react compiled, but I was getting a bad token error
      turns out that react was trying to start on an old login token, so I changed to 3000/auth/google and went through the 
      outh flow without a problem


83 - axios payload object was not showing up in console 
    solved via q/a forums in src/index.js needed to change 
  const store = createStore(()=>[]), {}, applyMiddleware(reduxThunk))

    to const store = createStore(reducers, {}, applyMiddleware(reduxThunk))


8